{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cross-validation error and its variance decomposition\n",
    "\n",
    "Cross-validation error as any empirical risk estimator depends on the observed data.\n",
    "The magnitude of statistical fluctuations is characterised by its variance â€“ we can expect that for large enough datasets, the cross-validation error is distributed similarly to a normal distribution.\n",
    "\n",
    "The paper *No Unbiased Estimator for the Variance of K-Fold Cross-Validation* by *Yoshua Bengio* and *Yves Grandvalet* provides a nice decomposition result for the variance of cross-validation error\n",
    "\\begin{align*}\n",
    "\\theta= \\frac{1}{n}\\cdot\\sigma^2+ \\frac{m-1}{n}\\cdot \\omega + \\frac{n-m}{n}\\cdot\\gamma,\n",
    "\\end{align*}\n",
    "where\n",
    "* $\\sigma^2$ is the average variance of a true test error \n",
    "* $\\omega$ is within-block covariance of test errors\n",
    "* $\\gamma$ is between-block covariance of test errors\n",
    "\n",
    "As it is quite difficult to formally define without specifying an algorithm, we define these in terms of Python code instead of a formal definition.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import scipy.stats as stats\n",
    "import sklearn\n",
    "\n",
    "from pandas import Series\n",
    "from pandas import DataFrame\n",
    "from typing import Tuple\n",
    "\n",
    "from tqdm import tnrange#, tqdm_notebook\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from plotnine import *\n",
    "\n",
    "# Local imports\n",
    "from common import *\n",
    "from convenience import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## I. Experiment setup\n",
    "\n",
    "We again consider a relatively simple prediction task $\\mathcal{D}_1$ with a relatively small feature set and an impossible prediction task $\\mathcal{D}_0$ with the same feature set for comparison. \n",
    "We use majority voting and logistic regression as example classifiers as in the previous notebook. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "sampler_0 = lambda n: data_sampler(n, 8, lambda x: logit(x, Series([0, 0])))\n",
    "sampler_1 = lambda n: data_sampler(n, 8, lambda x: logit(x, Series([10, 10])))\n",
    "clf_1 = MajorityVoting()\n",
    "clf_2 = LogisticRegression(solver = 'lbfgs')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## II. Average variance of a true test error\n",
    "\n",
    "Recall that k-fold cross-validation splits the data into $k$ folds, each of size $m$.\n",
    "The true variance $\\sigma^2$ measures the variance of a test error averaged over all possible training sets of size $(k-1)m$. Note that this term is well defined due to symmetry:\n",
    "\n",
    "* All splits are equivalent.\n",
    "* It does not matter which datapoints form the test set we take.\n",
    "\n",
    "The following algorithm would provide the true value for $\\sigma^2$ in the process $r\\to\\infty$ with probability 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def true_error_variance(sampler, clf, features, target, n: int, k:int=10, r:int=1000):\n",
    "    assert n % k == 0,  'Crossvalidation is unimplemented for cases n != k * m'\n",
    "   \n",
    "    m = int(n/k)\n",
    "\n",
    "    # Record losses of a data point in a test fold over all possible training sets \n",
    "    loss = Series(np.nan, index=range(r))\n",
    "    for i in tnrange(r):\n",
    "        \n",
    "        # Train a model\n",
    "        train = sampler((k-1) * m)\n",
    "        test  = sampler(m)\n",
    "        clf.fit(train[features], train[target])\n",
    "    \n",
    "        # We record the variance of the first test sample \n",
    "        loss[i] = float((clf.predict(test[features]) != test[target])[0])\n",
    "    \n",
    "    \n",
    "    return loss.var()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### True variance component  for $\\mathcal{D}_0$ and majority voting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d35c1d454e334f4a83820dfb8d2f6f12",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, max=1000), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "71f9b5bf23354865bce261a70dc2439f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, max=1000), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Sigma^2 for n = 100\n",
      "+0.250249\n",
      "+0.250025\n"
     ]
    }
   ],
   "source": [
    "k = 10\n",
    "n = 100\n",
    "r = 1000\n",
    "features = list(sampler_0(1).columns.values[:-1])\n",
    "var_1 = true_error_variance(sampler_0, clf_1, features, 'y', n, k, r)\n",
    "var_2 = true_error_variance(sampler_0, clf_1, features, 'y', n, k, r)\n",
    "print('Sigma^2 for n = {}\\n{:+.6}\\n{:+.6}'.format(n, var_1, var_2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### True variance component  for $\\mathcal{D}_1$ and logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f9084f4fc55f428ebd75ec28e3f539d8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, max=1000), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "49ed882c84ea4aca8bedf5f7f847938a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, max=1000), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Sigma^2 for n = 100\n",
      "+0.186683\n",
      "+0.188187\n"
     ]
    }
   ],
   "source": [
    "k = 10\n",
    "n = 100\n",
    "r = 1000\n",
    "features = list(sampler_1(1).columns.values[:-1])\n",
    "var_1 = true_error_variance(sampler_1, clf_2, features, 'y', n, k, r)\n",
    "var_2 = true_error_variance(sampler_1, clf_2, features, 'y', n, k, r)\n",
    "print('Sigma^2 for n = {}\\n{:+.6}\\n{:+.6}'.format(n, var_1, var_2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## III. Within-block covariance\n",
    "\n",
    "Within-block covariance $\\omega$ measures the covariance of two different error terms in the same test fold.\n",
    "Again, the covariance value is computed over all possible cross-validation sets.\n",
    "Note that this term is well defined due to symmetry:\n",
    "* All splits are equivalent.\n",
    "* It does not matter which datapoints form the test set we take.\n",
    "\n",
    "The following algorithm would provide the true value for $\\omega$ in the process $r\\to\\infty$ with probability 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def within_block_covariance(sampler, clf, features, target, n: int, k:int=10, r:int=1000):\n",
    "    assert n % k == 0,  'Crossvalidation is unimplemented for cases n != k * m'\n",
    "   \n",
    "    m = int(n/k)\n",
    "    \n",
    "    # There is only one error \n",
    "    if m <= 1:\n",
    "        return 0\n",
    "\n",
    "    # Record losses of two different data points belonging to the same test fold over all the training sets. \n",
    "    loss_1 = Series(np.nan, index=range(r))\n",
    "    loss_2 = Series(np.nan, index=range(r))\n",
    "    for i in tnrange(r):\n",
    "        \n",
    "        # Train a model\n",
    "        train = sampler((k-1) * m)\n",
    "        test = sampler(m)\n",
    "        clf.fit(train[features], train[target])\n",
    "    \n",
    "        # We record the loss of the first and the second test sample in the split\n",
    "        yp = clf.predict(test[features])\n",
    "        loss_1[i] = float((yp != test[target])[0])\n",
    "        loss_2[i] = float((yp != test[target])[1])\n",
    "                \n",
    "    # Compute the covariance between loss vectors              \n",
    "    return loss_1.cov(loss_2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Within-block covariance component  for $\\mathcal{D}_0$ and majority voting\n",
    "\n",
    "Within-block covariance component $\\omega$ must be zero for all prediction algorithms as true target values are independent, so the errors are independent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ea113de4eba14ee48d819d48b2bb5647",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, max=1000), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "da98e4309b904f02be5a105a0c4f8869",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, max=1000), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Omega for n = 100\n",
      "-0.00506206\n",
      "+0.00708709\n"
     ]
    }
   ],
   "source": [
    "k = 10\n",
    "n = 100\n",
    "r = 1000\n",
    "features = list(sampler_0(1).columns.values[:-1])\n",
    "omega_1 = within_block_covariance(sampler_0, clf_1, features, 'y', n, k, r)\n",
    "omega_2 = within_block_covariance(sampler_0, clf_1, features, 'y', n, k, r)\n",
    "print('Omega for n = {}\\n{:+.6}\\n{:+.6}'.format(n, omega_1, omega_2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Within-block covariance component  for $\\mathcal{D}_1$ and logistic regression\n",
    "\n",
    "As logistic regression quickly learns the true model on training set, test set errors become independent again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "548af9c2554f4fbb83b6d834694d01bc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, max=1000), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b867aab028684b58803be83244075c6f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, max=1000), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Omega for n = 100\n",
      "+0.0037017\n",
      "-0.00927528\n"
     ]
    }
   ],
   "source": [
    "k = 10\n",
    "n = 100\n",
    "r = 1000\n",
    "features = list(sampler_0(1).columns.values[:-1])\n",
    "omega_1 = within_block_covariance(sampler_1, clf_2, features, 'y', n, k, r)\n",
    "omega_2 = within_block_covariance(sampler_1, clf_2, features, 'y', n, k, r)\n",
    "print('Omega for n = {}\\n{:+.6}\\n{:+.6}'.format(n, omega_1, omega_2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## III. Between-block covariance\n",
    "\n",
    "Between-block covariance measures the covariance of two error terms in different test folds.\n",
    "Again, the covariance value is computed over all possible cross-validation sets.\n",
    "Note that this term is well defined due to symmetry:\n",
    "* All split pairs are equivalent.\n",
    "* It does not matter which datapoints form the test set we take.\n",
    "\n",
    "The following algorithm would provide the true value for $\\gamma$ in the process $r\\to\\infty$ with probability 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def between_block_covariance(sampler, clf, features, target, n: int, k:int=10, r:int=100):\n",
    "    assert n % k == 0,  'Crossvalidation is unimplemented for cases n != k * m'\n",
    "   \n",
    "    m = int(n/k)\n",
    "\n",
    "    # Record losses of two data points belonging to different test folds over all the training sets. \n",
    "    loss_1 = Series(np.nan, index=range(r))\n",
    "    loss_2 = Series(np.nan, index=range(r))\n",
    "    for i in tnrange(r):\n",
    "        \n",
    "        # As two splits are overlapping they have joint training set of size (k-2)*m \n",
    "        joint_train = sampler((k-2) * m)\n",
    "        test_1 = sampler(m)\n",
    "        test_2 = sampler(m)\n",
    "        \n",
    "        # We record the loss of the first test sample in the first split\n",
    "        train = pd.concat([joint_train, test_2])\n",
    "        clf.fit(train[features], train[target])\n",
    "        loss_1[i] = float(clf.predict(test_1[features])[0] != test_1[target][0])\n",
    "\n",
    "        # We record the loss of the first test sample in the second split\n",
    "        train = pd.concat([joint_train, test_1])\n",
    "        clf.fit(train[features], train[target])\n",
    "        loss_2[i] = float(clf.predict(test_2[features])[0] !=test_2[target][0])\n",
    "    \n",
    "    # Compute the covariance between loss vectors  \n",
    "    return loss_1.cov(loss_2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Between-block covariance component for $\\mathcal{D}_0$ and majority voting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "224d5bd6b7834e6e8b519c6f77db8c92",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, max=1000), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3439f0b0d3c743c188dff1d73a8c69ae",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, max=1000), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Gamma for n = 100\n",
      "+0.00484484\n",
      "+0.00100701\n"
     ]
    }
   ],
   "source": [
    "k = 10\n",
    "n = 100\n",
    "r = 1000\n",
    "features = list(sampler_0(1).columns.values[:-1])\n",
    "gamma_1 = between_block_covariance(sampler_0, clf_1, features, 'y', n, k, r)\n",
    "gamma_2 = between_block_covariance(sampler_0, clf_1, features, 'y', n, k, r)\n",
    "print('Gamma for n = {}\\n{:+.6}\\n{:+.6}'.format(n, gamma_1, gamma_2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Between-block covariance component for $\\mathcal{D}_1$ and logistic regression \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cb7dbc53aa074b599a20848da8398d06",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, max=1000), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a9883650608a4c7bb657ded2bf32811c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, max=1000), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Gamma for n = 100\n",
      "+0.00243243\n",
      "+0.00299399\n"
     ]
    }
   ],
   "source": [
    "k = 10\n",
    "n = 100\n",
    "r = 1000\n",
    "features = list(sampler_0(1).columns.values[:-1])\n",
    "gamma_1 = between_block_covariance(sampler_1, clf_2, features, 'y', n, k, r)\n",
    "gamma_2 = between_block_covariance(sampler_1, clf_2, features, 'y', n, k, r)\n",
    "print('Gamma for n = {}\\n{:+.6}\\n{:+.6}'.format(n, gamma_1, gamma_2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Homework"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7.1 Examples of cross-validation variance decomposition* (<font color='red'>3p</font>)\n",
    "\n",
    "The examples above were not very convincing as $\\omega$ and $\\gamma$ values were too close to zero. \n",
    "Find examples where this is not the case. You can take the paper *No Unbiased Estimator for the Variance of K-Fold Cross-Validation* as a starting point since it contains several examples of such datasets, both artificial and real.\n",
    "Implement either their artificial samplers or find a UCI repository dataset that is similar to the **Letter** dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "%config IPCompleter.greedy=True"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
